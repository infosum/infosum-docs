"use strict";(self.webpackChunkinfosum_docs=self.webpackChunkinfosum_docs||[]).push([[28],{2448:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var t=n(7624),s=n(2172);const i={sidebar_position:3},c="Filtering",d={id:"filtering",title:"Filtering",description:"Most v2 APIs for listing resources accept a filter string. A filter can be built of sub filters joined by the logical AND and OR operators, each sub filter is a field or precedence group followed by an operator followed by a value.",source:"@site/docs/filtering.mdx",sourceDirName:".",slug:"/filtering",permalink:"/infosum-docs/docs/filtering",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"mySidebar",previous:{title:"Authentication",permalink:"/infosum-docs/docs/authentication"}},o={},l=[];function a(e){const r={a:"a",code:"code",h1:"h1",p:"p",...(0,s.M)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"filtering",children:"Filtering"}),"\n",(0,t.jsx)(r.p,{children:"Most v2 APIs for listing resources accept a filter string. A filter can be built of sub filters joined by the logical AND and OR operators, each sub filter is a field or precedence group followed by an operator followed by a value.\nA sub filter may have a prefix of the logical NOT operator. One or more sub filters can be grouped with the precedence operators.\nThe sub filters in a precedence grouping are evaluated to a result before evaluating the rest of the filter. Precedence groups can be nested."}),"\n",(0,t.jsxs)(r.p,{children:["Use single quotes (",(0,t.jsx)(r.code,{children:"'"}),") to surround strings. Dates used in filters are accepted in ",(0,t.jsx)(r.a,{href:"https://datatracker.ietf.org/doc/html/rfc3339",children:"RFC3339 format"})," such as ",(0,t.jsx)(r.code,{children:'"2006-01-02T15:04:05Z07:00"'}),", ",(0,t.jsx)(r.code,{children:'"2006-01-02T15:04:05"'})," or ",(0,t.jsx)(r.code,{children:'"2006-01-02"'}),".\nA filter is provided as a query parameter like: ",(0,t.jsx)(r.code,{children:"api.infosum.com/api/v2/foo_bar?filter=name co 'foo' or name co 'bar'"}),". Filter strings can be constructed using the operations here:"]}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Operator"}),(0,t.jsx)("th",{children:"Meaning"}),(0,t.jsx)("th",{children:"Example"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"eq"}),(0,t.jsx)("td",{children:"Is Equal To"}),(0,t.jsx)("td",{children:"name eq 'foo'"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"ne"}),(0,t.jsx)("td",{children:"Not Equal To"}),(0,t.jsx)("td",{children:"name ne 'foo'"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"co"}),(0,t.jsx)("td",{children:"Contains"}),(0,t.jsx)("td",{children:"name co 'Bar'"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"ico"}),(0,t.jsx)("td",{children:"Contains (Case-Insensitive)"}),(0,t.jsx)("td",{children:"name ne 'bar'"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"nc"}),(0,t.jsx)("td",{children:"Does Not Contain"}),(0,t.jsx)("td",{children:"name nc 'Bar'"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"inc"}),(0,t.jsx)("td",{children:"Does Not Contain (Case-Insensitive)"}),(0,t.jsx)("td",{children:"name inc 'bar'"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"lt"}),(0,t.jsx)("td",{children:"Less Than"}),(0,t.jsx)("td",{children:"score lt 10"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"le"}),(0,t.jsx)("td",{children:"Less Than Or Equal To"}),(0,t.jsx)("td",{children:"score le 10"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"gt"}),(0,t.jsx)("td",{children:"Greater Than"}),(0,t.jsx)("td",{children:"score gt 10"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"ge"}),(0,t.jsx)("td",{children:"Greater Than Or Equal To"}),(0,t.jsx)("td",{children:"score ge 10"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"and"}),(0,t.jsx)("td",{children:"Logical AND"}),(0,t.jsx)("td",{children:"score eq 10 and name eq 'foo'"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"or"}),(0,t.jsx)("td",{children:"Logical OR"}),(0,t.jsx)("td",{children:"score eq 10 or score eq 10"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"not"}),(0,t.jsx)("td",{children:"Logical NOT"}),(0,t.jsx)("td",{children:"not score eq 10"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"( )"}),(0,t.jsx)("td",{children:"Precedence"}),(0,t.jsx)("td",{children:"(score lt 100 and score gt 10) or name eq 'foo'"})]})]})]})}function h(e={}){const{wrapper:r}={...(0,s.M)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},2172:(e,r,n)=>{n.d(r,{I:()=>d,M:()=>c});var t=n(1504);const s={},i=t.createContext(s);function c(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);