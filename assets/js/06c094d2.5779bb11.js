"use strict";(self.webpackChunkinfosum_docs=self.webpackChunkinfosum_docs||[]).push([[179],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return n?a.createElement(f,l(l({ref:t},p),{},{components:n})):a.createElement(f,l({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),r=n(86010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(87462),r=n(67294),o=n(86010),l=n(72389),i=n(67392),s=n(7094),u=n(12466);const p="tabList__CuJ",c="tabItem_LNqP";function m(e){var t,n;const{lazy:l,block:m,defaultValue:d,values:f,groupId:h,className:k}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=f?f:g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),y=(0,i.l)(v,((e,t)=>e.value===t.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===d?d:null!=(t=null!=d?d:null==(n=g.find((e=>e.props.default)))?void 0:n.props.value)?t:g[0].props.value;if(null!==b&&!v.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+v.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:_}=(0,s.U)(),[w,T]=(0,r.useState)(b),I=[],{blockElementScrollPositionUntilNextRender:C}=(0,u.o5)();if(null!=h){const e=N[h];null!=e&&e!==w&&v.some((t=>t.value===e))&&T(e)}const O=e=>{const t=e.currentTarget,n=I.indexOf(t),a=v[n].value;a!==w&&(C(t),T(a),null!=h&&_(h,String(a)))},x=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=I.indexOf(e.currentTarget)+1;n=null!=(a=I[t])?a:I[0];break}case"ArrowLeft":{var r;const t=I.indexOf(e.currentTarget)-1;n=null!=(r=I[t])?r:I[I.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},k)},v.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>I.push(e),onKeyDown:x,onFocus:O,onClick:O},l,{className:(0,o.Z)("tabs__item",c,null==l?void 0:l.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),l?(0,r.cloneElement)(g.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function d(e){const t=(0,l.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},99349:(e,t,n)=>{n.d(t,{ZP:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={toc:[{value:"Authentication",id:"authentication",level:2}]};function l(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"To use the InfoSum APIs you will need an ",(0,r.kt)("inlineCode",{parentName:"p"},"API Key"),". To generate an API for use in your application you can ",(0,r.kt)("a",{parentName:"p",href:"/docs/authentication"},"follow these instructions"),"."),(0,r.kt)("p",null,"For simplicity in the next step, we will assign the ",(0,r.kt)("inlineCode",{parentName:"p"},"API Key")," to an ",(0,r.kt)("inlineCode",{parentName:"p"},"environment")," variable as shown:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export INFOSUM_API_KEY="<your generated API key>";\n')))}l.isMDXComponent=!0},62042:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>f,frontMatter:()=>s,metadata:()=>p,toc:()=>m});var a=n(87462),r=(n(67294),n(3905)),o=n(65488),l=n(85162),i=n(99349);const s={},u="Transforming a file",p={unversionedId:"getting-started/transforming-a-file",id:"getting-started/transforming-a-file",title:"Transforming a file",description:"For a detailed description and information on Transformations, you can review the specific page here.",source:"@site/docs/getting-started/transforming-a-file.mdx",sourceDirName:"getting-started",slug:"/getting-started/transforming-a-file",permalink:"/infosum-docs/docs/getting-started/transforming-a-file",draft:!1,editUrl:"https://github.com/infosum/infosum-docs/tree/main/docs/getting-started/transforming-a-file.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Uploading a file from AWS S3 to a Cloud Vault",permalink:"/infosum-docs/docs/getting-started/uploading-a-file-from-aws-s3-to-a-cloudvault"},next:{title:"Cloud Vaults",permalink:"/infosum-docs/docs/cloudvaults/"}},c={},m=[{value:"Listing files",id:"listing-files",level:2},{value:"Transformation scripts",id:"transformation-scripts",level:2},{value:"Writing a transformation script",id:"writing-a-transformation-script",level:3},{value:"Checking the script for errors",id:"checking-the-script-for-errors",level:3},{value:"Running a transformation",id:"running-a-transformation",level:3}],d={toc:m};function f(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"transforming-a-file"},"Transforming a file"),(0,r.kt)("p",null,"For a detailed description and information on Transformations, you can review the specific page ",(0,r.kt)("a",{parentName:"p",href:"../transform"},"here"),"."),(0,r.kt)(i.ZP,{mdxType:"Authentication"}),(0,r.kt)("h2",{id:"listing-files"},"Listing files"),(0,r.kt)("p",null,"If no files have been uploaded to the ",(0,r.kt)("a",{parentName:"p",href:"../cloudvaults"},"Cloud Vault"),", please refer to the getting started guides for ",(0,r.kt)("a",{parentName:"p",href:"./uploading-a-file-from-aws-s3-to-a-cloudvault"},"uploading a file from AWS S3"),"."),(0,r.kt)("p",null,"If files are available to transform you will need the file IDs. To obtain the file IDs, run:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"curl",label:"cURL",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl --location --request GET 'https://api.infosum.com/api/v2/files/' \\\n--header 'Authorization: $INFOSUM_API_KEY'\n")))),(0,r.kt)("p",null,"This will give you a list of available files within the Cloud Vault and the associated meta data."),(0,r.kt)("h2",{id:"transformation-scripts"},"Transformation scripts"),(0,r.kt)("p",null,"To modify, otherwise known as transform, a file you will need a ",(0,r.kt)("inlineCode",{parentName:"p"},"bloblang")," script to do this."),(0,r.kt)("h3",{id:"writing-a-transformation-script"},"Writing a transformation script"),(0,r.kt)("p",null,"Let's assume that the data that needs transforming is in the form of a CSV file, as shown:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"userID"),(0,r.kt)("th",{parentName:"tr",align:null},"cat_action"),(0,r.kt)("th",{parentName:"tr",align:null},"cat_romance"),(0,r.kt)("th",{parentName:"tr",align:null},"cat_drama"),(0,r.kt)("th",{parentName:"tr",align:null},"cat_scifi"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"U0001"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"U0005"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"U9999"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"1")))),(0,r.kt)("p",null,"How can you transform these boolean columns into a simpler format of a ",(0,r.kt)("inlineCode",{parentName:"p"},"userID")," with just the associated ",(0,r.kt)("inlineCode",{parentName:"p"},"cat_*"),"?\nThe following bloblang script does this. By declaring the ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," file and how to read it, the ",(0,r.kt)("inlineCode",{parentName:"p"},"bloblang")," itself is a transformation pipeline, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"output")," for the format to return to the Cloud Vault."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'input:\n  concatenate_files:\n    sort_columns: [ "userID" ]\n    shard_total: 0\n    shard_index: 0\n    files:\n      - pattern: "*.csv"\n        format:\n        type: csv\n        csv:\n          delimiter: ","\n          headers: true\n\npipeline:\n  processors:\n    - bloblang: |\n        # Get the root (row)\n        root = this\n\n        # Set a map of key-values as sorted by the key (column name)\n        root.kvs = this.key_values().sort_by(pair -> pair.key)\n        \n        # Set the \'category\' parameter of the root to a map where:\n        # For each element in the sorted key-values:\n          # If the value is set to \\"1\\" AND the key (column header) contains \\"cat\\"\n            # Then set the value to be the key (column header)\n          # Else\n            # Throw away the element\n        root.category = root.kvs.map_each(kv -> if kv.value == "1" && kv.key.contains("cat") {kv.key} else {deleted()})\n        # Example:\n          # In:  {"kvs":{"cat_1":"1","cat_2":"0","cat_3":"1","something_else":"1"}}\n          # Out: {"category":["cat_1", "cat_3"}}\n          \noutput:\n  store_file:\n    name: reverse_encoded.sdf\n    schema:\n      - { name: userID,      type: STRING }\n      - { name: category,       type: STRING_ARRAY}\n')),(0,r.kt)("p",null,"For more details on ",(0,r.kt)("inlineCode",{parentName:"p"},"bloblang"),", please refer to our ",(0,r.kt)("a",{parentName:"p",href:"https://www.benthos.dev/docs/guides/bloblang/about"},"Benthos Bloblang documentation"),"."),(0,r.kt)("h3",{id:"checking-the-script-for-errors"},"Checking the script for errors"),(0,r.kt)("p",null,"Once you have a ",(0,r.kt)("inlineCode",{parentName:"p"},"bloblang")," script, you can validate it before executing it on large amounts of data."),(0,r.kt)("p",null,"To do this, you will need to encode your ",(0,r.kt)("inlineCode",{parentName:"p"},"bloblang")," script into the ",(0,r.kt)("inlineCode",{parentName:"p"},"script")," element as shown in the following API request:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"curl",label:"cURL",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --location --request POST \'https://api.infosum.com/api/v2/transform/scripts/validate\' \\\n--header \'Authorization: $INFOSUM_API_KEY\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n "script":"input:\\n  concatenate_files:\\n    sort_columns: [ \\"userID\\" ]\\n    shard_total: 0\\n    shard_index: 0\\n    files:\\n      - pattern: \\"*.csv\\"\\n        format:\\n          type: csv\\n          csv:\\n            delimiter: \\",\\"\\n            headers: true\\n\\npipeline:\\n  processors:\\n    - bloblang: |\\n        # Get the root (row)\\n        root = this\\n\\n        # Set a map of key-values as sorted by the key (column name)\\n        root.kvs = this.key_values().sort_by(pair -> pair.key)\\n\\n        # Set the \'\\\'\'category\'\\\'\' parameter of the root to a map where:\\n        # For each element in the sorted key-values:\\n          # If the value is set to \\"1\\" AND the key (column header) contains \\"cat\\"\\n            # Then set the value to be the key (column header)\\n          # Else\\n            # Throw away the element\\n        root.category = root.kvs.map_each(kv -> if kv.value == \\"1\\" && kv.key.contains(\\"cat\\") {kv.key} else {deleted()}) \\n        # Example:\\n          # In:  {\\"kvs\\":{\\"cat_1\\":\\"1\\",\\"cat_2\\":\\"0\\",\\"cat_3\\":\\"1\\",\\"something_else\\":\\"1\\"}}\\n          # Out: {\\"category\\":[\\"cat_1\\", \\"cat_3\\"}}\\n\\noutput: \\n  store_file:\\n    name: reverse_encoded.sdf\\n    schema:\\n      - { name: userID,      type: STRING }\\n      - { name: category,       type: STRING_ARRAY}\\n"\n }\'\n')))),(0,r.kt)("h3",{id:"running-a-transformation"},"Running a transformation"),(0,r.kt)("p",null,"Once the ",(0,r.kt)("inlineCode",{parentName:"p"},"bloblang")," script has passed validation, you can execute it against your files. You can run either a ",(0,r.kt)("inlineCode",{parentName:"p"},"scaled")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"static")," transformation task."),(0,r.kt)("p",null,"The information required by ",(0,r.kt)("inlineCode",{parentName:"p"},"static")," transformation endpoint is:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"script")," which is the encoded ",(0,r.kt)("inlineCode",{parentName:"li"},"bloblang")," you wish to execute"),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"file_vault_id")," which references where the ",(0,r.kt)("inlineCode",{parentName:"li"},"input")," files in the ",(0,r.kt)("inlineCode",{parentName:"li"},"script")," are housed"),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"compute_instance_id")," of where the ",(0,r.kt)("inlineCode",{parentName:"li"},"script")," will be run")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"curl",label:"cURL",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --location --request POST \'https://api.infosum.com/api/v2/transform/static-tasks\' \\\n--header \'Authorization: $INFOSUM_API_KEY\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  "script": "input:\\n  concatenate_files:\\n    sort_columns: [ \\"userID\\" ]\\n    shard_total: 0\\n    shard_index: 0\\n    files:\\n      - pattern: \\"*.csv\\"\\n        format:\\n          type: csv\\n          csv:\\n            delimiter: \\",\\"\\n            headers: true\\n\\npipeline:\\n  processors:\\n    - bloblang: |\\n        root = this\\n        root.kvs = this.key_values().sort_by(pair -> pair.key)\\n        root.category = root.kvs.map_each(kv -> if kv.value == \\"1\\" && kv.key.contains(\\"cat\\") {kv.key} else {deleted()}) \\n    \\noutput: \\n  store_file:\\n    name: demo_output.sdf\\n    schema:\\n      - { name: userID,      type: STRING }\\n      - { name: category,       type: STRING_ARRAY}\\n",\n  "file_vault_id": "",\n  "compute_instance_id": ""\n}\'\n')))))}f.isMDXComponent=!0}}]);